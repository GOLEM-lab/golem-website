{
  "hash": "1852652a5868eedba8753974e662b297",
  "result": {
    "markdown": "---\nauthor: Termeh Shafie\ntitle: Multigraph Representation of Network Data\nimage: featured.png\ntitle-block-style: none\ntoc: true\npriority: 2\ndescription: The exploratory and confirmatory statistical analysis of multivariate social networks represented as multigraphs.\ncategories:\n  - multigraphs\n---\n\n\n\n## Project summary\nMultigraphs are network representations in which multiple edges and edge loops (self edges) are permitted. Multigraph data structure can be observed directly but the possibility to obtain multigraphs using blocking, aggregation and scaling makes them widely applicable. \n\nFor the past decade, I've been working on a statistical framework for analyzing network data using this representation.  I have developed different multigraph multigraph models and derived several statistics under these models that can be used to analyse local and global network properties in order to convey important social phenomena and processes. The latest contribution in this framework is formal goodness of fit tests for the developed probability models for random multigraphs. \n\nThe proposed framework is  in full implemented in the R package 'multigraphr' and a description of various functions implemented in the package are given in the following. More details are provided in the package\n[vignette](https://cran.r-project.org/web/packages/multigraphr/vignettes/multigraphr.html)and the references listed.\n\n\n\n## R package `multigraphr` \n\n\n\n\n\n### Package overview\n\n<img src=\"hex_multigraphr.png\" align=\"right\" width=\"190px\"/>\n[![CRAN status](https://www.r-pkg.org/badges/version/multigraphr)](https://cran.r-project.org/package=multigraphr)\n[![CRAN Downloads](http://cranlogs.r-pkg.org/badges/multigraphr)](https://CRAN.R-project.org/package=multigraphr) \n\nThis package introduces the multigraph framework for analyzing social network data. Brief description of various functions implemented in the package are given in the following but more details are provided in the package vignettes and the references listed.\n\n### Installation\nYou can install the released version of multigraphr from [CRAN](https://CRAN.R-project.org) with:\n\n``` r\ninstall.packages(\"multigraphr\")\n```\n\nThe development version from [GitHub](https://github.com/) with:\n\n``` r\n# install.packages(\"devtools\")\ndevtools::install_github(\"termehs/multigraphr\")\n```\n\n## Multigraphs and applicability\n\nMultigraphs are network representations in which multiple edges and edge loops (self edges) are permitted.  These data structures can be either directly observed or aggregated by classifying or cross-classifying node attributes into meta nodes. For the latter case, within group edges correspond to self-edges. See example below where the original graph with 15 nodes and 12 edges (left) is aggregated based on node categories into a small multigraph with 4 nodes (right).\n\n<img src=\"mg_ex1.png\" align=\"center\" width=\"750px\"/>\n\nEdge aggregation can also be used to obtain multigraphs. Assume that we study a graph with three different types of relations over three periods of time:\n<img src=\"mg_ex2.png\" align=\"center\" width=\"700px\"/>\n\nIf we aggregate over time periods, we obtain for each edge category a multigraph for the total time period of three days:\n\n<img src=\"mg_ex3.png\" align=\"center\" width=\"700px\"/>\n\nFor more details on these kinds of aggregations, see Shafie (2015;2016).\n\n## Multigraph representation of network data\nMultigraphs are represented by their edge multiplicity sequence **M** with elements *M(i,j)*, denoting the number of edges at vertex pair sites *(i,j)* ordered according to *(1,1) < (1,2) <···< (1,n) < (2,2) < (2,3) <···< (n,n)*, \nwhere *n* is number of nodes. The number of vertex pair sites is given by \n*r = n(n+1)/2*.\n\n### Random multigraph models\nTwo probability models for generating undirected random multigraphs are implemented in the package together with several statistics under these two models. Moreover, functions for goodness of fit tests are available for the presented models.\n\nNote that some of the functions are only practical for small scale multigraphs.\n\nThe first model is obtained by random stub matching (RSM) given observed degree sequence of a multigraphs, so that edge assignments to vertex pair sites are dependent. The second is obtained by independent edge assignments (IEA) according to a common probability distribution. There are two ways in which an approximate IEA model can be obtained from an RSM model, thus facilitating the structural analysis. These two ways are \n\n * independent stub assignment (ISA) \n \n * independent edge assignment of stubs (IEAS) \n \n(Shafie, 2016).\n\n### Example\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_2bf1b154e45b2f54af3bac7a4e68bac1'}\n\n```{.r .cell-code}\nlibrary('multigraphr')\n```\n:::\n\nConsider a small graph on 3 nodes and the following adjacency matrix:\n\n::: {.cell hash='index_cache/html/adj_0d01867ece636704a7825754aec7005e'}\n\n```{.r .cell-code}\nA <-  matrix(c(1, 1, 0, \n               1, 2, 2, \n               0, 2, 0), \n             nrow = 3, ncol = 3)\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    1    0\n[2,]    1    2    2\n[3,]    0    2    0\n```\n:::\n:::\n\nThe degree sequence of the multigraph has double counted diagonals (edge stubs for loops) and is given by\n\n::: {.cell hash='index_cache/html/degseq_3a6a90ce66a0a6d129cab458e439f21e'}\n\n```{.r .cell-code}\nD <- get_degree_seq(adj = A, type = 'graph')\nD\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 7 2\n```\n:::\n:::\n\nso that number of edges in the multigraph is half the sum of the degree sequence which is equal to 6.\n\nThe RSM model given observed degree sequence shows the sample space consists of 7 possible multigraphs, as represented by their multiplicity sequence  `m.seq` (each row correspond to the edge multiplicity sequence of a unique multigraph):\n\n::: {.cell hash='index_cache/html/rsm_ex1_2a365332931a5337df96371d5595fced'}\n\n```{.r .cell-code}\nrsm_1 <- rsm_model(deg.seq = D)\nrsm_1$m.seq\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  M11 M12 M13 M22 M23 M33\n1   1   1   0   3   0   1\n2   1   1   0   2   2   0\n3   1   0   1   3   1   0\n4   0   3   0   2   0   1\n5   0   3   0   1   2   0\n6   0   2   1   2   1   0\n7   0   1   2   3   0   0\n```\n:::\n:::\n\nwith probabilities associated with each multigraph, together with statistics 'number of loops', 'number of multiple edges' and 'simple graphs or not':\n\n::: {.cell hash='index_cache/html/rsm_ex2_478737e27139aca082846d39c44eb06d'}\n\n```{.r .cell-code}\nrsm_1$prob.dists\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    prob.rsm loops multiedges simple\n1 0.03030303     5          1      0\n2 0.18181818     3          3      0\n3 0.06060606     4          2      0\n4 0.06060606     3          3      0\n5 0.24242424     1          5      0\n6 0.36363636     2          4      0\n7 0.06060606     3          3      0\n```\n:::\n:::\n\n\nConsider using the IEA model to approximate the RSM model so that edge assignment probabilities are functions of observed degree sequence. Note that the sample space for multigraphs is much bigger than for the RSM model so the multiplicity sequences are not printed (they can be found using the function `get_edgemultip_seq` for very small multigraphs and their probabilities can be found using the multinomial distribution). The following shows the number of multigraphs under either of the IEA models:\n\n::: {.cell hash='index_cache/html/ieas_ex1_6490a4ac84dc0af600de54db7ede47c8'}\n\n```{.r .cell-code}\nieas_1 <-   iea_model(adj = A , type = 'graph',  model = 'IEAS', K = 0, apx = TRUE)\nieas_1$nr.multigraphs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 462\n```\n:::\n:::\n\n\n\n\n## Statistics to analyze structural properties\nThese statistics include number of loops (indicator of e.g. homophily) and number of multiple edges (indicator of e.g. multiplexity/interlocking), which are implemented in the package together with their probability distributions, moments and interval estimates under the different multigraph models.\n\n### Example (cont'd)\nUnder the RSM model, the first two moments and interval estimates of the statistics  *M1* = 'number of loops' and *M2* = 'number of multiple edges' are given by\n\n::: {.cell hash='index_cache/html/rsm_ex3_cbd95be167f797e68b643ecf5d24fcb4'}\n\n```{.r .cell-code}\nrsm_1$M\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             M1    M2\nExpected  2.273 3.727\nVariance  0.986 0.986\nUpper 95% 4.259 5.713\nLower 95% 0.287 1.741\n```\n:::\n:::\n\nwhich are calculated using the numerically found probability distributions under RSM (no analytical solutions exist for these moments).\n\nUnder the IEA models (IEAS or ISA), moments of these statistics, together with the complexity statistic $R_k$ representing the sequence of\nfrequencies of edge sites with multiplicities *0,1,...,k*,  are found using derived formulas. Thus, there is no limit on multigraph size to use these. When the IEAS model is used to approximate the RSM model as shown above:\n\n::: {.cell hash='index_cache/html/ieas_ex2_3a354713fdc420c4727666e57dbb00c0'}\n\n```{.r .cell-code}\nieas_1$M\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              M1    M2\nObserved   3.000 3.000\nExpected   2.273 3.727\nVariance   1.412 1.412\nUpper 95%  4.649 6.104\nLower 95% -0.104 1.351\n```\n:::\n\n```{.r .cell-code}\nieas_1$R\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             R0     R1     R2\nObserved  2.000  2.000  2.000\nExpected  2.674  1.588  1.030\nVariance  0.575  1.129  0.760\nUpper 95% 4.191  3.713  2.773\nLower 95% 1.156 -0.537 -0.713\n```\n:::\n:::\n\nWhen the ISA model is used to approximate the RSM model (see above):\n\n::: {.cell hash='index_cache/html/isa_ex1_9993c76342cb4d3d433580bc2245e14c'}\n\n```{.r .cell-code}\nisa_1 <-   iea_model(adj = A , type = 'graph',  \n                     model = 'ISA', K = 0, apx = TRUE)\nisa_1$M\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             M1    M2\nObserved  3.000 3.000\nExpected  2.583 3.417\nVariance  1.471 1.471\nUpper 95% 5.009 5.842\nLower 95% 0.158 0.991\n```\n:::\n\n```{.r .cell-code}\nisa_1$R\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             R0     R1     R2\nObserved  2.000  2.000  2.000\nExpected  2.599  1.703  1.018\nVariance  0.622  1.223  0.748\nUpper 95% 4.176  3.915  2.748\nLower 95% 1.021 -0.509 -0.711\n```\n:::\n:::\n\n\nThe IEA models can also be used independent of the RSM model. For example, the IEAS model can be used where edge assignment probabilities are estimated using the observed edge multiplicities (maximum likelihood estimates):\n\n::: {.cell hash='index_cache/html/ieas_ex3_15f94f8f9dd062ffb10769215bd44d22'}\n\n```{.r .cell-code}\nieas_2 <-   iea_model(adj = A , type = 'graph',  \n                      model = 'IEAS', K = 0, apx = FALSE)\nieas_2$M\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             M1    M2\nObserved  3.000 3.000\nExpected  3.000 3.000\nVariance  1.500 1.500\nUpper 95% 5.449 5.449\nLower 95% 0.551 0.551\n```\n:::\n\n```{.r .cell-code}\nieas_2$R\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             R0     R1     R2\nObserved  2.000  2.000  2.000\nExpected  2.845  1.331  1.060\nVariance  0.434  0.805  0.800\nUpper 95% 4.163  3.125  2.849\nLower 95% 1.528 -0.464 -0.729\n```\n:::\n:::\n\nThe ISA model can also be used independent of the RSM model. Then, a sequence containing the stub assignment probabilities (for example based on prior belief) should be given as argument:\n\n::: {.cell hash='index_cache/html/isa_ex2_3cba5b0336a4838d0d4fb6aa7cc494c6'}\n\n```{.r .cell-code}\nisa_2 <-   iea_model(adj = A , type = 'graph',  \n                     model = 'ISA', K = 0, apx = FALSE, p.seq = c(1/3, 1/3, 1/3))\nisa_2$M\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              M1    M2\nObserved   3.000 3.000\nExpected   2.000 4.000\nVariance   1.333 1.333\nUpper 95%  4.309 6.309\nLower 95% -0.309 1.691\n```\n:::\n\n```{.r .cell-code}\nisa_2$R\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             R0     R1     R2\nObserved  2.000  2.000  2.000\nExpected  2.144  2.248  1.160\nVariance  0.632  1.487  0.710\nUpper 95% 3.734  4.687  2.845\nLower 95% 0.554 -0.190 -0.525\n```\n:::\n:::\n\n\nThe interval estimates can then be visualized to detect discrepancies between observed and expected values thus indicating social mechanisms at play in the generation of edges, and to detect interval overlap and potential interdependence between different types of edges (see Shafie 2015,2016; Shafie & Schoch 2021). \n\n## Goodness of fit tests\nGoodness of fits tests of multigraph models using Pearson (*S*) and\ninformation divergence (*A*) test statistics under the random stub matching (RSM)\nand by independent edge assignments (IEA) model,\nwhere the latter is either independent edge assignments of stubs (IEAS) or\nindependent stub assignment (ISA).\nThe tests are performed using goodness-of-fit measures between the\nedge multiplicity sequence of a specified model or an observed multigraph,\nand the expected multiplicity sequence according to a simple or composite hypothesis.\n\n## Simulated goodness of fit tests\nProbability distributions of test statistics, summary of tests, moments of tests statistics,  adjusted test statistics, critical values, significance level according to asymptotic distribution, and power of tests can be examined using `gof_sim` given a specified model from which we simulate observed values from, and a null or non-null hypothesis from which we calculate expected values from. This in order to investigate the behavior of the null and non-null distributions of the test statistics and their fit to to asymptotic chi-square distributions.\n\n\n### Example\nSimulated goodness of fit tests for multigraphs with *n=4* nodes and *m=10* edges.\n\n**(1) Testing a simple IEAS hypothesis with degree sequence (6,6,6,2) against a RSM model with degrees (8,8,2,2)**:\n\n::: {.cell hash='index_cache/html/gof1_8fbe93ef431debbe5d15842a9434302a'}\n\n```{.r .cell-code}\ngof1 <- gof_sim(m = 10, model = 'IEAS', deg.mod = c(8,8,2,2), \n                hyp = 'IEAS', deg.hyp = c(6,6,6,2))\n```\n:::\n\n\n**(2) Testing a correctly specified simple IEAS hypothesis with degree sequence (14,2,2,2)**:\n\n::: {.cell hash='index_cache/html/gof2_1abeaf04b42b9ebee1d8ebbceeda472b'}\n\n```{.r .cell-code}\ngof2 <- gof_sim(m = 10, model = 'IEAS', deg.mod = c(14,2,2,2), \n                hyp = 'IEAS', deg.hyp = c(14,2,2,2))\n```\n:::\n\n\nThe non-null (`gof1`) and null (`gof2`)  distributions of the test statistics together with their asymptotic chi2-distribution can be visualized using  `ggplot2`:\n\n\n<img src=\"p1_gof_1.png\" width = 380 px/>\n<img src=\"p2_gof_2.png\" width = 380 px/>\n\n \n**(3) Testing a composite IEAS hypothesis against a RSM model with degree sequence (14,2,2,2)**:\n\n::: {.cell hash='index_cache/html/gof3_730ae590552a5520bbdcd2656cba2067'}\n\n```{.r .cell-code}\ngof3 <- gof_sim(m = 10, model = 'RSM', deg.mod = c(14,2,2,2), \n                hyp = 'IEAS', deg.hyp = 0)\n```\n:::\n\n\n**(4) Testing a composite ISA hypothesis against a ISA model with degree sequence (14,2,2,2)**:\n\n::: {.cell hash='index_cache/html/gof4_f05afc6744b3ade8d837daf493741155'}\n\n```{.r .cell-code}\ngof4 <- gof_sim(m = 10, model = 'ISA', deg.mod = c(14,2,2,2), \n                hyp = 'ISA', deg.hyp = 0)\n```\n:::\n\n\nThe non-null (`gof3`) and null (`gof4`)  distributions of the test statistics can then be visualized as shown above to check their fit to the asymptotic χ²-distribution.\n\n## Performing the goodness of fit test on your data\nUse function `gof_test` to test whether the observed data follows IEA approximations of the RSM model. The null hypotheses can be simple or composite, although the latter is not recommended for small multigraphs as it is difficult to detect a false composite hypothesis under an RSM model and under IEA models (this can be checked and verified using `gof_sim` to simulate these cases).\n\nNon-rejection of the null implies that the approximations fit the data, thus implying that above statistics under the IEA models can be used to further analyze the observed network. \nConsider the following multigraph from the well known Florentine family network with  marital. This multigraphs is aggregated based on the three actor attributes wealth (W), number of priorates (P) and total number of ties (T) which are all dichotomized to reflect high or low  economic, political and social influence (details on the aggregation can be found in Shafie, 2015):\n\n\n<img src=\"mg_flor.png\" align=\"right\" width=\"350px\"/>\n\n\nThe multiplicity sequence represented as an upper triangular matrix for this mutigrpah is given by\n\n\n::: {.cell hash='index_cache/html/flor1_0317d85f1d3ba3fc91256757f1177a5f'}\n\n```{.r .cell-code}\nflor_m <- t(matrix(c (0, 0, 1, 0, 0, 0,\t0, 0,\n                      0, 0, 0, 0, 0, 0,\t0, 0,\n                      0, 0,\t0, 2, 0, 0,\t1, 5,\n                      0, 0,\t0, 0, 0, 0,\t1, 1,\n                      0, 0,\t0, 0, 0, 0,\t1, 2,\n                      0, 0,\t0, 0, 0, 0,\t2, 1,\n                      0, 0,\t0, 0, 0, 0,\t0, 2,\n                      0, 0,\t0, 0, 0, 0,\t0, 1), nrow= 8, ncol=8))\n```\n:::\n\n\nThe equivalence of adjacency matrix for the multigraph is given by \n\n::: {.cell hash='index_cache/html/flor2_dde7f1e6545492b33c064c729e2c20de'}\n\n```{.r .cell-code}\nflor_adj <- flor_m+t(flor_m)\nflor_adj \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n[1,]    0    0    1    0    0    0    0    0\n[2,]    0    0    0    0    0    0    0    0\n[3,]    1    0    0    2    0    0    1    5\n[4,]    0    0    2    0    0    0    1    1\n[5,]    0    0    0    0    0    0    1    2\n[6,]    0    0    0    0    0    0    2    1\n[7,]    0    0    1    1    1    2    0    2\n[8,]    0    0    5    1    2    1    2    2\n```\n:::\n:::\n\nwith the diagonal representing the loops double counted (Shafie, 2016). The function  `get_degree_seq` can now be used to find the degree sequence for this multigraph:\n\n::: {.cell hash='index_cache/html/flor3_8d3a4a5b9d4ee93d7abf230920ef98f0'}\n\n```{.r .cell-code}\nflor_d <- get_degree_seq(adj = flor_adj, type = 'multigraph')\nflor_d\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  0  9  4  3  3  7 13\n```\n:::\n:::\n\n\nNow we test whether the observed network fits the IEAS or the ISA model. The $p$-values for testing whether there is a significant difference between observed and expected edge multiplicity values according to the two approximate IEA models are given in the output tables below. Note that the asymptotic χ²-distribution has $r-1 = (n(n+1)/2) - 1 =35$ degrees of freedom.\n\n::: {.cell hash='index_cache/html/flor4_55b60cb865d5cdc9d5a749d15b0b0985'}\n\n```{.r .cell-code}\nflor_ieas_test <- gof_test(flor_adj, 'multigraph', 'IEAS', flor_d, 35)\nflor_ieas_test\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Stat dof Stat(obs) p-value\n1    S  35    15.762   0.998\n2    A  35    18.905   0.988\n```\n:::\n:::\n\n::: {.cell hash='index_cache/html/flor5_c1f866282ee9741f6b94bdc3a92f609a'}\n\n```{.r .cell-code}\nflor_isa_test <- gof_test(flor_adj, 'multigraph', 'ISA', flor_d, 35)\nflor_isa_test \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Stat dof Stat(obs) p-value\n1    S  35    16.572   0.997\n2    A  35    19.648   0.983\n```\n:::\n:::\n\nThe results show that we have strong evidence for the null such that we fail to reject it. Thus, there is not a significant difference between the observed and the expected edge multiplicity sequence according on the two IEA models. Statistics derived under these models presented above can thus be used to analyze the structure of these multigraphs. \n\n## References\n\n* Shafie, T. (2015). A multigraph approach to social network analysis. *Journal of Social Structure*, 16. [Link](/publications/multigraph_approach/index.html)\n\n*  Shafie, T. (2016). Analyzing local and global properties of multigraphs. *The Journal of Mathematical Sociology*, 40(4), 239-264.  [Link](/publications/global_local_multigraphs/index.html)\n\n* Frank, O., Shafie, T., (2018). Random Multigraphs and Aggregated Triads with Fixed Degrees. *Network Science*, **6**(2), 232-250. [Link](/publications/aggregated_triads/index.html)\n\n*  Shafie, T., Schoch, D. (2021) Multiplexity analysis of networks using multigraph representations. *Statistical Methods & Applications* 30, 1425–1444.\n[Link](/publications/multiplexity/index.html)\n\n* Shafie, T. (2022). Goodness of fit tests for random multigraph models, *Journal of Applied Statistics*. [Link](/publications/gof_multigraph/index.html)\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}